#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct {
    int salud;
    int comida;
    int agua;
    int energia;
    int madera;
    int piedra;
    int refugio;
    int durabilidad_refugio;
} Jugador;

void mostrar_titulo() {
    printf("\n");
    printf("**************************************************\n");
    printf("**************************************************\n");
    printf("**                                              **\n");
    printf("**              Esta por jugar                  **\n");
    printf("**             \033[0;33mIsland of Escape !\033[0m               **\n");
    printf("**                                              **\n");
    printf("**             QUE LO DISFRUTE !!               **\n");
    printf("**                                              **\n");
    printf("**                                              **\n");
    printf("**  Creditos:                                   **\n");
    printf("**     - Caminero, Valentina                    **\n");
    printf("**     - Calderon, Macarena Jazmin              **\n");
    printf("**     - Lencinas, Ignacio                      **\n");
    printf("**     - Sandoval, Lautaro Emanuel              **\n");
    printf("**                                              **\n");
    printf("**************************************************\n");
    printf("**************************************************\n");
    printf("\n");
	printf("\033[1;36mObjetivo del Juego:\033[0m\n");
    printf("Sobrevive en la isla recolectando recursos, manteniendo tus necesidades basicas (salud, comida, agua y energia)\n");
    printf("y enfrentandote a los peligros del entorno.\n");
    printf("\n");
    printf("\033[1;36mNecesidades Basicas:\033[0m\n");
    printf("- Salud: Si llega a 0, perderas el juego. Manten niveles altos de comida y agua para regenerarla.\n");
    printf("- Comida y Agua: Necesarias para sobrevivir y mantener tu salud en estado\n");
    printf("- Energia: Necesaria para realizar acciones como recolectar recursos o explorar. Descansa para recuperarla. \n");
    printf("\n");
    printf("\033[1;36mCuidado con los Peligros:\033[0m\n");
    printf("- Sin refugio, puedes ser atacado mientras descansas.\n");
    printf("- La falta de comida o agua reducira tu salud rapidamente.\n");
    printf("- Los recursos son limitados, usalos sabiamente.\n");
    printf("\n");
    printf("\033[1;32mBUENA SUERTE !!\033[0m\n");
    printf("\nPresiona ENTER para comenzar...\n");
    getchar(); // Espera que el jugador presione Enter
}

void mostrar_estado(Jugador *jugador, int hora) {
    printf("\n\033[1;31m=== ESTADO DEL JUGADOR ===\033[0m\n");
    printf("\033[1;32mSalud:\033[0m %d\n", jugador->salud);
    printf("\033[1;35mComida:\033[0m %d\n", jugador->comida);
    printf("\033[1;36mAgua:\033[0m %d\n", jugador->agua);
    printf("\033[1;33mEnergia:\033[0m %d\n", jugador->energia);
    printf("\033[0;33mMadera:\033[0m %d\n", jugador->madera);
    printf("\033[1;37mPiedra:\033[0m %d\n", jugador->piedra);
    printf("\033[1;34mRefugio:\033[0m %s\n", jugador->refugio ? "Construido" : "No construido");
    if (jugador->refugio) {
        printf("\033[1;32mDurabilidad del Refugio:\033[0m %d/100\n", jugador->durabilidad_refugio);
    }
    printf("Hora actual: %d:00 (%s)\n", hora, (hora >= 6 && hora < 18) ? "Dia" : "Noche");
    printf("\033[1;31m==========================\033[0m\n\n");
}

void recolectar_recursos(Jugador *jugador, int *hora) {
    printf("\n");
    printf("Recolectando recursos...\n");
    int evento = rand() % 6;

    int madera_recolectada = 0;
    int piedra_recolectada = 0;

    switch (evento) {
        case 0:
            madera_recolectada = rand() % 6 + 2;
            piedra_recolectada = rand() % 4 + 1;
            printf("Recolectaste: +%d madera, +%d piedra.\n", madera_recolectada, piedra_recolectada);
            break;
        case 1:
            madera_recolectada = 10;
            jugador->energia -= 5;
            printf("Recolectaste madera de un arbol resistente: +10 madera, -5 energia.\n");
            break;
        case 2:
            piedra_recolectada = 6;
            jugador->salud -= 5;
            printf("Recolectaste fragmentos afilados de roca: +6 piedras, pero sufriste un corte: -5 salud.\n");
            break;
        case 3:
            jugador->comida += 4;
            jugador->salud -= 5;
            printf("Te acercaste a un nido de insectos y te picaron: -5 salud, pero conseguiste +4 comida.\n");
            break;
        case 4:
            piedra_recolectada = 8;
            jugador->energia -= 8;
            printf("Recolectaste piedras en una cueva oscura: +8 piedras, -8 energia.\n");
            break;
        case 5:
            madera_recolectada = 6;
            piedra_recolectada = 5;
            printf("Recolectaste eficientemente: +6 madera, +5 piedras.\n");
            break;
    }

    jugador->madera += madera_recolectada;
    jugador->piedra += piedra_recolectada;

    if (jugador->madera > 50) {
        jugador->madera = 50;
        printf("Has alcanzado el límite de madera (50).\n");
    }
    if (jugador->piedra > 50) {
        jugador->piedra = 50;
        printf("Has alcanzado el límite de piedra (50).\n");
    }

    jugador->energia -= 5;
    if (jugador->energia > 100) jugador->energia = 100;

    *hora += 2;
}

void construir_refugio(Jugador *jugador, int *hora) {
    if (jugador->madera >= 20 && jugador->piedra >= 10) {
        jugador->refugio = 1;
        jugador->madera -= 20;
        jugador->piedra -= 10;
        jugador->durabilidad_refugio = 100;
        printf("\n");
        printf("Construiste un refugio exitosamente.\n");
        *hora += 4;
    } else {
        int madera_faltante = 20 - jugador->madera;
        int piedra_faltante = 10 - jugador->piedra;
        printf("\n");
        printf("No tienes suficientes recursos para construir un refugio.\n");
        if (madera_faltante > 0) {
            printf("Te faltan %d unidades de madera.\n", madera_faltante);
        }
        if (piedra_faltante > 0) {
            printf("Te faltan %d unidades de piedra.\n", piedra_faltante);
        }
    }
}

void mantener_refugio(Jugador *jugador, int *hora) {
    if (!jugador->refugio) {
    	printf("\n");
        printf("No tienes un refugio construido para reforzar.\n");
        return;
    }
    if (jugador->madera >= 5 && jugador->piedra >= 3) {
        jugador->madera -= 5;
        jugador->piedra -= 3;
        jugador->durabilidad_refugio += 20;
        if (jugador->durabilidad_refugio > 100) jugador->durabilidad_refugio = 100;
        printf("\n");
        printf("Reforzaste tu refugio. Durabilidad actual: %d/100.\n", jugador->durabilidad_refugio);
        *hora += 2;
    } else {
    	printf("\n");
        printf("No tienes suficientes recursos para reforzar tu refugio.\n");
    }
}

void explorar(Jugador *jugador, int *hora) {
    printf("\n");
    printf("Explorando el area...\n");
    int evento = rand() % 10;

    switch (evento) {
        case 0:
            printf("Encontraste un arroyo: +5 agua.\n");
            jugador->agua += 5;
            if (jugador->agua > 100) jugador->agua = 100;
            break;
        case 1:
            printf("Un lobo te ataco: -10 salud.\n");
            jugador->salud -= 10;
            break;
        case 2:
            printf("Encontraste frutos silvestres: +8 comida.\n");
            jugador->comida += 8;
            if (jugador->comida > 100) jugador->comida = 100;
            break;
        case 3:
            printf("Tropiezas y pierdes 5 de energía por una caida.\n");
            jugador->energia -= 5;
            if (jugador->energia < 0) jugador->energia = 0;
            break;
        case 4:
            printf("Encuentras restos de un campamento: +10 de madera.\n");
            jugador->madera += 10;
            break;
        case 5:
            printf("Encontraste una cascada refrescante: +15 agua, -5 energia.\n");
            jugador->agua += 15;
            jugador->energia -= 5;
            break;
        case 6:
            printf("Una serpiente te mordio: -15 salud.\n");
            jugador->salud -= 15;
            break;
        case 7:
            printf("Exploraste una cueva peligrosa: +5 piedras, pero sufriste una herida: -10 salud.\n");
            jugador->piedra += 5;
            jugador->salud -= 10;
            break;
        case 8:
            if (rand() % 2 == 0) {
                printf("Comiste unas frutas exoticas y estaban deliciosas: +10 comida.\n");
                jugador->comida += 10;
            } else {
                printf("Comiste unas frutas exoticas y te intoxicaste: -10 salud.\n");
                jugador->salud -= 10;
            }
            break;
        case 9:
            printf("Descubriste herramientas abandonadas: +10 madera, +5 piedras.\n");
            jugador->madera += 10;
            jugador->piedra += 5;
            break;
    }

    jugador->energia -= 8;
    if (jugador->energia < 0) jugador->energia = 0;
    *hora += 4;
}

void descansar(Jugador *jugador, int *hora) {
    printf("\nDescansando...\n");

    jugador->energia += 20;
    if (jugador->energia > 100) jugador->energia = 100;

    if (rand() % 4 == 0) { 
        printf("No pudiste descansar bien debido a ruidos extraños. Apenas recuperaste energia.\n");
        jugador->energia -= 10;
        if (jugador->energia < 0) jugador->energia = 0;
        *hora += 6;
        return;
    }

    if (jugador->comida > 15 && jugador->agua > 15 && jugador->salud < 100) {
        jugador->salud += 10;
        if (jugador->salud > 100) jugador->salud = 100;
        printf("Recuperaste 10 de salud gracias a tus buenos niveles de comida y agua.\n");
    } else if (jugador->salud < 100) {
        printf("No recuperaste salud. Asegurate de tener suficiente comida y agua.\n");
    }

    if (jugador->refugio) {
        printf("Tu refugio proporciona proteccion mientras descansas.\n");
        jugador->durabilidad_refugio -= 5;
        if (jugador->durabilidad_refugio <= 0) {
            printf("Tu refugio colapso debido al desgaste.\n");
            jugador->refugio = 0;
        } else {
            if (rand() % 3 == 0) { 
                printf("Un animal intento entrar al refugio. Perdio 10 de durabilidad.\n");
                jugador->durabilidad_refugio -= 10;
                if (jugador->durabilidad_refugio <= 0) {
                    printf("El refugio no resistio el ataque y colapso.\n");
                    jugador->refugio = 0;
                }
            }
        }
    } else {
        printf("Sin refugio, corres más riesgos mientras descansas.\n");
        if (rand() % 2 == 0) {
            jugador->salud -= 10;
            if (jugador->salud < 0) jugador->salud = 0;
            printf("Un animal salvaje te ataco: -10 de salud.\n");
        }
    }

    *hora += 6;

}

void desmayarse(Jugador *jugador, int *hora) {
    printf("\n");
    printf("\n--- Te desmayaste por falta de energia ---\n");
    int evento = rand() % 9;

    switch (evento) {
        case 0:
            printf("Un viajero encontro tu cuerpo inconsciente y te ayudo. Recuperaste 20 de salud.\n");
            jugador->salud += 20;
            break;
        case 1:
            printf("Un animal salvaje te ataco mientras estabas inconsciente. Perdiste 15 de salud.\n");
            jugador->salud -= 15;
            break;
        case 2:
            printf("Perdiste horas dormido sin incidentes, pero desperdiciaste tiempo valioso.\n");
            break;
        case 3:
            printf("No lograste despertar debido al excesivo cansancio.\n");
            jugador->salud = 0;
            break;
        case 4:
            printf("Te desmayaste y alguien robo tus recursos: -10 madera, -10 piedras.\n");
            jugador->madera -= 10;
            jugador->piedra -= 10;
            if (jugador->madera < 0) jugador->madera = 0;
            if (jugador->piedra < 0) jugador->piedra = 0;
            break;
        case 5:
            printf("Un extraño te encontro y te ayudo. Recuperaste 15 de salud.\n");
            jugador->salud += 15;
            if (jugador->salud > 100) jugador->salud = 100;
            break;
        case 6:
            printf("Te desmayaste y tus suministros de comida y agua se derramaron: -10 comida, -10 agua.\n");
            jugador->comida -= 10;
            jugador->agua -= 10;
            if (jugador->comida < 0) jugador->comida = 0;
            if (jugador->agua < 0) jugador->agua = 0;
            break;
        case 7:
            printf("Un animal salvaje te ataco mientras estabas inconsciente: -20 salud.\n");
            jugador->salud -= 20;
            break;
        case 8:
            printf("Tu desmayo resulto en un descanso reparador. Recuperaste 30 de energia.\n");
            jugador->energia += 30;
            if (jugador->energia > 100) jugador->energia = 100;
            break;
    }

    jugador->energia += 30;
    if (jugador->energia > 100) jugador->energia = 100;
    *hora += 6;
}

void consumir_recursos(Jugador *jugador, int comida_necesaria, int agua_necesaria) {
    if (jugador->comida < comida_necesaria) {
    	printf("\n");
        printf("No tienes suficiente comida, tu salud disminuye.\n");
        jugador->salud -= (comida_necesaria - jugador->comida) * 2;
        jugador->comida = 0;
    } else {
        jugador->comida -= comida_necesaria;
    }

    if (jugador->agua < agua_necesaria) {
    	printf("\n");
        printf("No tienes suficiente agua, tu salud disminuye.\n");
        jugador->salud -= (agua_necesaria - jugador->agua) * 2;
        jugador->agua = 0;
    } else {
        jugador->agua -= agua_necesaria;
    }
}

void ciclo_dia(Jugador *jugador, int *hora) {
    mostrar_estado(jugador, *hora);

    if (jugador->energia <= 0) {
        desmayarse(jugador, hora);
        if (jugador->salud <= 0) return;
    }

    int accion;
    int entrada_valida;

    do {
        printf("\033[38;5;214m1. Recolectar recursos\033[0m\n");
        printf("\033[38;5;214m2. Construir refugio\033[0m\n");
        printf("\033[38;5;214m3. Reforzar refugio\033[0m\n");
        printf("\033[38;5;214m4. Explorar\033[0m\n");
        printf("\033[38;5;214m5. Descansar\033[0m\n\n");
        printf("Selecciona una accion: ");

        entrada_valida = scanf("%d", &accion);
        if (entrada_valida != 1) {
            while (getchar() != '\n');
            accion = -1;
        }

        #ifdef _WIN32
            system("cls");
        #else
            system("clear");
        #endif

        switch (accion) {
            case 1:
                recolectar_recursos(jugador, hora);
                break;
            case 2:
                construir_refugio(jugador, hora);
                break;
            case 3:
                mantener_refugio(jugador, hora);
                break;
            case 4:
                explorar(jugador, hora);
                break;
            case 5:
                descansar(jugador, hora);
                break;
            default:
                printf("Accion invalida. Por favor, selecciona una opcion valida.\n");
                break;
        }
    } while (accion < 1 || accion > 5);

    consumir_recursos(jugador, 2, 1);

    if (jugador->refugio) {
        jugador->durabilidad_refugio -= 5;
        if (jugador->durabilidad_refugio <= 0) {
            printf("\nTu refugio se ha derrumbado.\n");
            jugador->refugio = 0;
        }
    }

    if (*hora >= 24) {
        *hora = 0;
        printf("=== Un nuevo dia comienza ===\n");
    }
}

int main() {
    Jugador jugador = {100, 50, 50, 100, 10, 5, 0, 0};
    int hora = 6;
    srand(time(NULL));

    mostrar_titulo();

    printf("Bienvenido a Island of Escape.\n");

    while (jugador.salud > 0) {
        ciclo_dia(&jugador, &hora);

		if (jugador.salud <= 0) {
		    printf("\n");
		    printf("\033[1;31mHas muerto. Fin del juego.\033[0m\n"); 
		    printf("\n");
		    printf("Gracias por jugar Island of Escape!\n");
		    break;
		}
    }

    return 0;
}
